import 'package:devup/widgets/body_part.dart';
import 'package:devup/widgets/setup_navigation.dart';
import 'package:devup/model/avatar_part.dart';
import 'package:flutter/material.dart';

import '../backend.dart';

class AvatarCreatorPage extends StatefulWidget {
  @override
  _AvatarCreatorPageState createState() => _AvatarCreatorPageState();
}

class _AvatarCreatorPageState extends State<AvatarCreatorPage> {

  /// Get the [AvatarCreatorService.bodyMap] saved in [AvatarCreatorService]
  Map<String, AvatarPart> get bodyMap => backend<AvatarCreatorService>().bodyMap;

  /// Returns the Avatar Parts, each inside a ScrollView.
  /// Will be generated from [AvatarCreatorService.bodyMap]
  ///
  ///   return List of [BodyPart]
  List<Widget> actualAvatars() {
    return bodyMap.values.map((part) {
      return BodyPart(
        avatarPart: part
      );
    }).toList();
  }

  /// Returns the fake PageView, which will be lay over
  /// each [BodyPart] generated from [actualAvatars]
  ///
  /// The List will be sorted via the [AvatarPart.order], because the order which
  /// the Stack uses to display the Avatar isn't equal to the order of
  /// PageViews that needs to be swipeable
  ///
  ///   return List of PageViews generated by [AvatarCreatorService.bodyMap]
  List<Widget> holderAvatars() {
    List<AvatarPart> sortedList = bodyMap.values.toList()
    ..sort((a, b) => a.order.compareTo(b.order));

    return sortedList.map((part) {
      return Container(
          color: Colors.transparent,
          height: part.height,
          child: PageView.builder(
            controller: part.holderController,
            itemCount: part.parts.length,
            itemBuilder: (_, __){
              return Container();
            },
          ),
        );
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Stack(
          children: <Widget>[
            //Body
            ...actualAvatars(),
            // TODO: Change Column to Stack
            // TODO: Wrap each ColorRect inside a Positioned
            Column(
              children: <Widget>[
                ...holderAvatars(),
              ],
            )
          ],
        )
      ),
      bottomNavigationBar: SetupNavigationBar.noBackButton(
        nextPageCallback: () {

        },
      ),
    );
  }
}


