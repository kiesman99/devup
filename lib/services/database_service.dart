import 'dart:async';
import 'dart:convert';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:devup/model/user.dart';
import 'package:firestore_helpers/firestore_helpers.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:uuid/uuid.dart';

////////////////////////////////////////////////////////////////////////////////////
/// IMPORTANT: All objects contain there documentID as property.
/// This ID is generated by the App, not be FireStore. If objects have unique names
/// like categories that name is used as key. Otherwise a UUID is generated
////////////////////////////////////////////////////////////////////////////////////

class ObjectDoesNotExistsException implements Exception {
  final String message;

  ObjectDoesNotExistsException(this.message);

  @override
  String toString() {
    return message;
  }
}

abstract class DatabaseService {
  User currentUser;

  Future<bool> saveUser(User user);

  Future<User> getCurrentUser();

  Stream<List<User>> matchUsers();
}

class DatabaseServiceFireStore implements DatabaseService {
  final userCollection = Firestore.instance.collection("users");

  ////////////////////////////////////////////////////////////////////////////////////
  /// Users
  ///////////////////////////////////////////////////////////////////////////////////

  @override
  Future<bool> saveUser(User user) async {
    try {
      if (user.id == null)
      {
        Uuid uuid = Uuid();
        user.id = uuid.v1();
      }
      await userCollection
          .document(user.id)
          .setData(user.toJson());

      SharedPreferences prefs = await SharedPreferences.getInstance();
      prefs.setString('userData', json.encode(user.toJson()));

      currentUser = user;
      return true;
    } catch (e) {
      print(e);
      //todo logging
      return false;
    }
  }

  @override
  User currentUser;

  @override
  Future<User> getCurrentUser() async {
    if (currentUser == null) {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      var userData = prefs.getString('userData');
      if (userData == null) {
        currentUser = User();
      } else {
        return User.fromJson(json.decode(userData));
      }
    }
    return currentUser;
  }

  @override
  Stream<List<User>> matchUsers() {
    return userCollection.snapshots().map<List<User>>((doc) => doc.documents.map<User>((doc) => User.fromJson(doc.data)).toList());
  }
}
